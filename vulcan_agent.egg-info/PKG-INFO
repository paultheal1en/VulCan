Metadata-Version: 2.4
Name: vulcan-agent
Version: 1.0.0
Summary: An autonomous penetration testing agent with metacognitive capabilities and persistent state management.
Author: VulCan Project Team
License: MIT
Keywords: cybersecurity,penetration-testing,autonomous,ai-agent,metacognition
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Information Technology
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Security
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: strands-agents[litellm,mistral,ollama,openai]>=1.0.0
Requires-Dist: strands-agents-tools==0.2.5
Requires-Dist: PyPDF2
Requires-Dist: pdfplumber
Requires-Dist: tqdm
Requires-Dist: chardet
Requires-Dist: litellm
Requires-Dist: google-generativeai
Requires-Dist: google-genai
Requires-Dist: mistralai
Requires-Dist: mem0ai==0.1.110
Requires-Dist: faiss-cpu
Requires-Dist: pymilvus
Requires-Dist: langchain
Requires-Dist: langchain-community
Requires-Dist: langchain-core
Requires-Dist: langchain-huggingface
Requires-Dist: langchain-milvus
Requires-Dist: langchain-openai
Requires-Dist: langchain_google_genai
Requires-Dist: langchain-text-splitters
Requires-Dist: sentence-transformers
Requires-Dist: langchain_mistralai
Requires-Dist: SQLAlchemy
Requires-Dist: PyMySQL
Requires-Dist: fastapi
Requires-Dist: uvicorn[standard]
Requires-Dist: streamlit
Requires-Dist: streamlit-antd-components
Requires-Dist: streamlit-aggrid
Requires-Dist: pydantic
Requires-Dist: pydantic-settings
Requires-Dist: boto3
Requires-Dist: botocore
Requires-Dist: ollama>=0.1.0
Requires-Dist: requests
Requires-Dist: httpx
Requires-Dist: click
Requires-Dist: rich
Requires-Dist: paramiko
Requires-Dist: ruamel.yaml
Requires-Dist: loguru
Requires-Dist: tenacity
Requires-Dist: python-docx
Requires-Dist: python-pptx
Requires-Dist: PyMuPDF
Requires-Dist: opencv-python
Requires-Dist: unstructured
Requires-Dist: rapidocr-onnxruntime
Requires-Dist: strenum
Requires-Dist: memoization
Requires-Dist: opensearch-py
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: pytest-mock; extra == "dev"
Requires-Dist: pylint; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: isort; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Requires-Dist: jupyterlab; extra == "dev"

## Hướng dẫn Cài đặt và Thiết lập

### 1. Yêu cầu Hệ thống

*   **Hệ điều hành:** Linux (khuyến nghị Kali Linux hoặc các bản phân phối Debian-based).
*   **Python:** 3.11+
*   **Conda (khuyến nghị):** Để quản lý môi trường.
*   **Docker:** Để chạy MySQL server một cách dễ dàng.
*   **MySQL Server:** Một server MySQL đang chạy (khuyến nghị chạy qua Docker).
*   **Zilliz Cloud Account (Tùy chọn):** Một tài khoản Zilliz Cloud (có gói miễn phí) để host Knowledge Base nếu bạn muốn sử dụng tính năng này.

### 2. Cài đặt Môi trường

1.  **Sao chép Repository:**
    ```bash
    git clone https://github.com/your-repo/VulCan-main.git
    cd VulCan-main
    ```

2.  **Tạo và Kích hoạt Môi trường Conda:**
    ```bash
    conda create --name vulcanenv python=3.11 -y
    conda activate vulcanenv
    ```

3.  **Cài đặt các Phụ thuộc Python:**
    Lệnh này sẽ đọc `pyproject.toml` và cài đặt tất cả các thư viện cần thiết, bao gồm cả các gói hỗ trợ cho Mistral.
    ```bash
    pip install -e .[dev]
    ```

### 3. Thiết lập Cấu hình

Bạn cần tạo và chỉnh sửa các tệp `.yaml` trong thư mục gốc của dự án.

1.  **Database (`db_config.yaml`):**
    Cung cấp thông tin kết nối đến MySQL server của bạn.
    ```yaml
    mysql:
      host: 127.0.0.1
      port: 3306
      user: root # User mặc định của Docker image
      password: rootpassword # Password mặc định của Docker image
      database: vulcan_db
    ```
    Sau đó, chạy lệnh sau để khởi tạo service DB bằng Docker:
    ```bash
    docker compose up -d
    ```

2.  **Mô hình Ngôn ngữ (`llm_config.yaml`):**
    Chọn nhà cung cấp LLM của bạn (`server`) và điền các thông số tương ứng. VulCan hỗ trợ **Ollama** (local), **Bedrock** (remote), và **Mistral AI** (remote).

    ```yaml
    # --- Lựa chọn 1: Chế độ Local (Ollama) ---
    server: ollama
    ollama_host: http://localhost:11434
    ollama_model_id: llama3 # Hoặc model khác bạn đã pull
    ollama_embedding_model_id: mxbai-embed-large # Khuyến nghị cho embedding

    # --- Lựa chọn 2: Chế độ Remote (AWS Bedrock) ---
    # server: bedrock
    # aws_region: us-east-1
    # bedrock_model_id: anthropic.claude-3-sonnet-20240229-v1:0
    
    # --- Lựa chọn 3: Chế độ Remote (Mistral AI) ---
    # server: mistral
    # mistral_model_id: mistral-large-latest # Hoặc một model khác của Mistral
    # mistral_api_key: null # Để trống và đặt biến môi trường MISTRAL_API_KEY
    
    # Cấu hình chung
    temperature: 0.5
    max_tokens: 4096
    ```    *   **Nếu dùng Ollama:** Đảm bảo bạn đã chạy `ollama pull llama3` và `ollama pull mxbai-embed-large`.
    *   **Nếu dùng Bedrock:** Đảm bảo bạn đã cấu hình AWS credentials (`aws configure`).
    *   **Nếu dùng Mistral AI:** Hãy đặt API key của bạn vào một biến môi trường để bảo mật.
        ```bash
        export MISTRAL_API_KEY="your_mistral_api_key_here"
        ```

3.  **Knowledge Base (`kb_config.yaml`):**
    Điền thông tin từ Zilliz Cloud của bạn nếu bạn muốn sử dụng tính năng RAG.
    ```yaml
    kb_name: vulcan_rag 
    ZILLIZ_CLOUD_URI: "https://your-zilliz-cloud-uri.com"
    ZILLIZ_CLOUD_TOKEN: "your-zilliz-cloud-api-key"
    embedding_model: "all-MiniLM-L6-v2"
    # ... các cấu hình khác
    ```

### 4. Khởi tạo Dự án

Sau khi đã cấu hình xong, chạy lệnh `init` một lần duy nhất. Lệnh này sẽ tạo các thư mục cần thiết và các bảng trong database.

```bash
vulcan init
```

---

## Cách chạy VulCan

### Chế độ Tương tác (Khuyến nghị)

Chạy agent mà không cần tham số. Chương trình sẽ hỏi bạn muốn tiếp tục session cũ hay tạo mới.

```bash
vulcan start
```

### Chế độ Không tương tác (Dùng cho Kịch bản)

Cung cấp nhiệm vụ trực tiếp qua cờ `-m` hoặc `--mission`.

```bash
vulcan start --mission "Target: <địa chỉ mục tiêu>, Objective: <mô tả mục tiêu>"
```

### Các Tùy chọn Hữu ích

*   `--iterations <số>`: Ghi đè số bước tối đa được định nghĩa trong `config.yaml`.
*   `--no-parallel`: Buộc agent không thực thi các lệnh `shell` song song (hữu ích cho việc gỡ lỗi).

**Ví dụ một phiên chạy hoàn chỉnh:**

```bash
# Bắt đầu một cuộc pentest trên máy lab DVWA
vulcan start --mission "Target: http://127.0.0.1:8080, Objective: Find and exploit SQL Injection and Command Injection vulnerabilities in DVWA at low security level."
```
